// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Microsoft_Teams_Graph_RESTAPIs_Connect.Models;
//
//    var messageCard = MessageCard.FromJson(jsonString);

namespace Microsoft_Teams_Graph_RESTAPIs_Connect.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MessageCard
    {
        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("@context")]
        public Uri Context { get; set; }

        [JsonProperty("themeColor")]
        public string ThemeColor { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("sections")]
        public List<Section> Sections { get; set; }

        [JsonProperty("potentialAction")]
        public List<PotentialAction> PotentialAction { get; set; }
    }

    public partial class PotentialAction
    {
        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("inputs")]
        public List<Input> Inputs { get; set; }

        [JsonProperty("actions")]
        public List<CardAction> Actions { get; set; }
    }

    public partial class CardAction
    {
        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("target")]
        public Uri Target { get; set; }
    }

    public partial class Input
    {
        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("isMultiline", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMultiline { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("isMultiSelect", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool? IsMultiSelect { get; set; }

        [JsonProperty("choices", NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choices { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty("display")]
        public string Display { get; set; }

        [JsonProperty("value")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Value { get; set; }
    }

    public partial class Section
    {
        [JsonProperty("activityTitle")]
        public string ActivityTitle { get; set; }

        [JsonProperty("activitySubtitle")]
        public string ActivitySubtitle { get; set; }

        [JsonProperty("activityImage")]
        public Uri ActivityImage { get; set; }

        [JsonProperty("facts")]
        public List<Fact> Facts { get; set; }

        [JsonProperty("markdown")]
        public bool Markdown { get; set; }
    }

    public partial class Fact
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class MessageCard
    {
        public static MessageCard FromJson(string json) => JsonConvert.DeserializeObject<MessageCard>(json, Microsoft_Teams_Graph_RESTAPIs_Connect.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MessageCard self) => JsonConvert.SerializeObject(self, Microsoft_Teams_Graph_RESTAPIs_Connect.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
